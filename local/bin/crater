#!/bin/bash

FORMAT_ERROR="\e[1;31m[ERROR]"
FORMAT_SUCCESS="\e[1;32m[SUCCESS]"
FORMAT_TITLE="\e[0;34m"
FORMAT_END="\e[0m"

function help() {
	printf "
${FORMAT_TITLE}USAGE:${FORMAT_END}
    $(basename $0) [FILE TYPE] [FILE NAME] [TEMPLATE TYPE]

${FORMAT_TITLE}DESCRIPTION:${FORMAT_END}
    Creates a default file in a specific programming language.

${FORMAT_TITLE}ARGUMENTS:${FORMAT_END}
    FILE TYPE              bash, c, c++, go, html, java, latex, lua, python, rust.
    FILE NAME              (Optional) The name of the file.
    TEMPLATE TYPE          (Optional) basic, code.

${FORMAT_TITLE}EXAMPLES:${FORMAT_END}
    $(basename $0) html index
    $(basename $0) python
    $(basename $0) c++ wordFinder code

${FORMAT_TITLE}REPORTING BUGS:${FORMAT_END}
    Report issues at: https://github.com/druxorey/dotfiles/issues

"
	exit 1
}


function main() {
	fileType=$1
	fileName=${2:-"default"}
	templateName=${3:-"basic"}

	case $fileType in
		"bash") extension="sh";;
		"c") extension="c";;
		"c++") extension="cpp";;
		"cpp") extension="cpp";;
		"golang") extension="go";;
		"go") extension="go";;
		"html") extension="html";;
		"java") extension="java";;
		"latex") extension="tex";;
		"lua") extension="lua";;
		"python") extension="py";;
		"rust") extension="rs";;
		"sh") extension="sh";;
		"shell") extension="sh";;
		*) help
		;;
	esac

    . $HOME/.local/share/crater/${extension}-template.sh

	eval "content=\$${templateName}Template"

	if [[ -z "$content" ]]; then
		printf "${FORMAT_ERROR} Template not found.${FORMAT_END}"
		exit 1
	fi

	echo "$content" > "${fileName}.${extension}"
	printf "${FORMAT_SUCCESS} File "${fileName}.${extension}" created${FORMAT_END}\n"
}

main "$@"
