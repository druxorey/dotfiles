#!/usr/bin/env python3

import os
import sys

PACKAGES_FILES_PATH = "/home/druxorey/Workspace/projects/dotfiles/"
PACKAGES_FILES = {
    "base": "drx-base.packages",
    "extra": "drx-extra.packages"
}

def printHelp():
    print("""
USAGE:
    packages <list|add|remove> <base|extra> [<pacman|aur>] [<package_name>]
    packages search <package_name>

DESCRIPTION:
    A utility script to manage package lists for Arch Linux.

ARGUMENTS:
    list <base|extra>
        Lists all packages in the specified file type.

    add <base|extra>
        Adds a package to the specified file type. You will be prompted to specify
        the package type (pacman or aur) and the package name.

    remove <base|extra>
        Removes a package from the specified file type. You will be prompted to
        specify the package type (pacman or aur) and the package name.

    search <package_name>
        Searches for a package in both base and extra files. The package name must
        be provided as an argument.

EXAMPLES:
    packages list base
    packages add extra
    packages remove base
    packages search firefox

REPORTING BUGS:
    Report issues at: https://github.com/druxorey/dotfiles/issues
""")


def loadPackages(filePath):
    packages = {"pacman": [], "aur": []}
    with open(filePath, "r") as file:
        lines = file.readlines()
        currentList = None
        for line in lines:
            line = line.strip()
            if line.startswith("base_pacman_packages=(") or line.startswith("extra_pacman_packages=("):
                currentList = "pacman"
            elif line.startswith("base_aur_packages=(") or line.startswith("extra_aur_packages=("):
                currentList = "aur"
            elif line == ")":
                currentList = None
            elif currentList and line:
                packages[currentList].append(line)
    return packages


def savePackages(action, filePath, packages):
    with open(filePath, "w") as file:
        file.write("#!/bin/bash\n\n")
        for key, values in packages.items():
            file.write(f"{action}_{key}_packages=(\n")
            for value in values:
                file.write(f"    {value}\n")
            file.write(")\n\n")


def listPackages(filePath):
    packages = loadPackages(filePath)
    print("Pacman packages:")
    for pkg in packages["pacman"]:
        print(f"  {pkg}")
    print("\nAUR packages:")
    for pkg in packages["aur"]:
        print(f"  {pkg}")


def addPackage(fileType, filePath, packageType, packageName):
    packages = loadPackages(filePath)
    if packageName in packages[packageType]:
        print(f"Package '{packageName}' already exists in {packageType} packages.")
        return
    packages[packageType].append(packageName)
    savePackages(fileType, filePath, packages)
    print(f"Package '{packageName}' added to {packageType} packages.")


def removePackage(fileType, filePath, packageType, packageName):
    packages = loadPackages(filePath)
    if packageName not in packages[packageType]:
        print(f"Package '{packageName}' not found in {packageType} packages.")
        return
    packages[packageType].remove(packageName)
    savePackages(fileType, filePath, packages)
    print(f"Package '{packageName}' removed from {packageType} packages.")


def searchPackage(packageToSearch):
    basePackages = loadPackages(os.path.join(PACKAGES_FILES_PATH, PACKAGES_FILES["base"]))
    extraPackages = loadPackages(os.path.join(PACKAGES_FILES_PATH, PACKAGES_FILES["extra"]))

    for pkg in basePackages["pacman"]:
        if packageToSearch == pkg:
            print(f"Package '{packageToSearch}' found in base packages.")
            return
    for pkg in basePackages["aur"]:
        if packageToSearch == pkg:
            print(f"  {pkg}")
            return

    for pkg in extraPackages["pacman"]:
        if packageToSearch == pkg:
            print(f"Package '{packageToSearch}' found in extra packages.")
            return
    for pkg in extraPackages["aur"]:
        if packageToSearch == pkg:
            print(f"  {pkg}")
            return

    print("Package not found.")
    return


def main():
    if len(sys.argv) < 3:
        printHelp()
        return

    action = sys.argv[1]

    if action == "search":
        packageToSearch = sys.argv[2]
        searchPackage(packageToSearch)
        return

    fileType = sys.argv[2]

    if fileType not in PACKAGES_FILES:
        print("Invalid file type. Use 'base' or 'extra'.")
        return

    filePath = os.path.join(PACKAGES_FILES_PATH, PACKAGES_FILES[fileType])

    if action == "list":
        listPackages(filePath)
    elif action in ["add", "remove"]:
        packageType = input("Enter package type (pacman/aur): ").strip()
        if packageType not in ["pacman", "aur"]:
            print("Invalid package type. Use 'pacman' or 'aur'.")
            return

        packageName = input("Enter package name: ").strip()
        if not packageName:
            print("Package name cannot be empty.")
            return

        if action == "add":
            addPackage(fileType, filePath, packageType, packageName)
        elif action == "remove":
            removePackage(fileType, filePath, packageType, packageName)
    else:
        print("Invalid action. Use 'list', 'add', or 'remove'.")


if __name__ == "__main__":
    main()
